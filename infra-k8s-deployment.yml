apiVersion: v1
kind: Namespace
metadata:
  name: ksoot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
            - name: mongo-config
              mountPath: /data/configdb
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: mongo-config
          emptyDir: { }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: arango
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arango
  template:
    metadata:
      labels:
        app: arango
    spec:
      containers:
        - name: arango
          image: arangodb/arangodb:latest
          ports:
            - containerPort: 8529
          env:
            - name: ARANGO_ROOT_PASSWORD
              value: admin
            - name: ARANGO_DB_NAME
              value: products_db
          volumeMounts:
            - name: arango-data
              mountPath: /var/lib/arangodb3
      volumes:
        - name: arango-data
          persistentVolumeClaim:
            claimName: arango-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: arango-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: arango
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - port: 8529
      targetPort: 8529
  selector:
    app: arango
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: admin
            - name: POSTGRES_HOST_AUTH_METHOD
              value: scram-sha-256
            #  Create databases on deployment
            - name: POSTGRES_DATABASES
              value: spark_jobs_db, error_logs_db
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d/init-postgres.sh
              subPath: init-postgres.sh
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-script
          configMap:
            name: postgres-init
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: ksoot
data:
#  Create databases on deployment
  init-postgres.sh: |
    #!/bin/bash
    echo "Inside init-postgres.sh"
    set -e
    
    if [ -n "$POSTGRES_DATABASES" ]; then
    echo "Multiple database creation requested: $POSTGRES_DATABASES"
    for db in $(echo $POSTGRES_DATABASES | tr ',' ' '); do
    echo "  Creating database '$db' owned by user 'postgres'"
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
    CREATE DATABASE $db;
    GRANT ALL PRIVILEGES ON DATABASE $db TO $POSTGRES_USER;
    EOSQL
    done
    echo "Postgres Databases created"
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres-port
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.3.2
          ports:
            - containerPort: 2181
          env:
            - name: TZ
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_DATA_DIR
              value: "/var/lib/zookeeper/data"
            - name: ZOOKEEPER_LOG_DIR
              value: "/var/lib/zookeeper/log"
            - name: ZOOKEEPER_SERVER_ID
              value: "1"
          volumeMounts:
            - mountPath: /var/lib/zookeeper/data
              name: zookeeper-data
            - mountPath: /var/lib/zookeeper/log
              name: zookeeper-log
      volumes:
        - name: zookeeper-data
          persistentVolumeClaim:
            claimName: zookeeper-data-pvc
        - name: zookeeper-log
          persistentVolumeClaim:
            claimName: zookeeper-log-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookeeper-data-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookeeper-log-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - port: 2181
      targetPort: 2181
      name: zookeeper-port
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      enableServiceLinks: false
      initContainers:
        - name: wait-for-zookeeper
          image: busybox
          command: ['sh', '-c', 'until nc -z zookeeper 2181; do echo "Waiting for Zookeeper..."; sleep 2; done']
          env:
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: zookeeper:2181
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.3.2
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://kafka:29092,LISTENER_EXTERNAL://kafka:9092"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://0.0.0.0:29092,LISTENER_EXTERNAL://0.0.0.0:9092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: ksoot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - name: external
      port: 9092
      targetPort: 9092
    - name: internal
      port: 29092
      targetPort: 29092
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: ksoot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka 29092; do echo "Waiting for Kafka..."; sleep 2; done']
        - name: kafka-topic-creator
          image: bitnami/kafka:latest
#          Create 'job-stop-requests' and 'error-logs' topics on deployment
          command:
            - sh
            - -c
            - |
              kafka-topics.sh --create --topic job-stop-requests --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
              kafka-topics.sh --create --topic error-logs --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
          env:
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: zookeeper:2181
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "local"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: "kafka:29092"
            - name: KAFKA_CLUSTERS_0_ZOOKEEPER
              value: "zookeeper:2181"
            - name: KAFKA_BROKERCONNECT
              value: "kafka:29092"
            - name: DYNAMIC_CONFIG_ENABLED
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: ksoot
spec:
  type: LoadBalancer
  ports:
    - port: 8100
      targetPort: 8080
      name: kafka-ui-port
  selector:
    app: kafka-ui

#    The Following is required to allow Spark to be able to Create Driver and Executor pods
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fabric8-rbac
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ksoot
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark
  namespace: ksoot
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spark-role
subjects:
  - kind: ServiceAccount
    name: spark
    namespace: ksoot
roleRef:
  kind: ClusterRole
  name: edit
  apiGroup: rbac.authorization.k8s.io
